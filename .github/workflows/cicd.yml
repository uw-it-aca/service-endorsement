---
name: Build, Test and Deploy

env:
  RELEASE_NAME: prt
  DJANGO_APP: endorsement
  GCR_TAG_BASE: gcr.io/uwit-mci-axdd

on:
  push:
    branches:
      - feature/github-actions
  pull_request:
    branches:
      - feature/github-actions
    types:
      - opened
      - reopened
      - synchronize

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set Commit Hash
        run: echo "COMMIT_HASH=$(git rev-parse --short=7 HEAD)" >> $GITHUB_ENV

      - name: Set Image Tag
        run: echo "IMAGE_TAG=${{ env.RELEASE_NAME }}:$COMMIT_HASH" >> $GITHUB_ENV

      - name: Prep Image Cache
        run: >-
          echo "${{ secrets.GITHUB_TOKEN }}" |
          docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin &&
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache || true &&
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache || true

      - name: Build Intermediate Image
        run: >-
          docker build --target wpack -t wpack
          --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache .

      - name: Cache Intermediate Image
        run: >-
          docker tag wpack docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache &&
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache || true

      - name: Build App Image
        run: >-
          docker build --target app-container -t "$IMAGE_TAG"
          --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache
          --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache .

      - name: Cache App Image
        run: >-
          docker tag "$IMAGE_TAG" docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache &&
          docker push docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache || true

      - name: Build Test Image
        run: >-
          docker build --target app-test-container -t app-test-container
          --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache
          --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache .

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Run Image Tests
        id: tests
        shell: bash
        run: >-
          docker run -u root -t
          -v /tmp:/coverage
          -e DJANGO_APP="$DJANGO_APP"
          -e "ENV=localdev" -e "AUTH=SAML_MOCK"
          app-test-container
          bash -c ". ./docker/test.sh"

      - name: Record Test Results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install coverage coveralls
          cp /tmp/.coverage.* .
          coverage combine
          coveralls

      - name: Push Image to GCR
        if: github.event_name == 'push'
        env:
          GCR_TAG: ${{ env.GCR_TAG_BASE }}/${{ env.IMAGE_TAG }}
        run: >-
          echo "${{ secrets.GCP_JSON_KEY }}" | base64 -d |
          docker login --username=_json_key --password-stdin https://gcr.io &&
          docker tag "$IMAGE_TAG" "$GCR_TAG" &&
          docker push "$GCR_TAG"

  deploy:
    if: github.event_name == 'push'

    needs: build

    runs-on: ubuntu-18.04

    env:
      GH_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GIT_REPO_SLUG: ${{ github.repository }}
      BUILD_NUMBER: ${{ github.run_id }}
      BUILD_WEB_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      DEPLOY_APP_BASE: https://raw.githubusercontent.com/uw-it-aca/gcp-app-deploy
      DEPLOY_APP_BRANCH: feature/dump-env

    steps:
      - name: Setup Deploy Environment
        run: echo "GIT_REPO_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Deploy Production
        if: env.GIT_REPO_BRANCH == 'master'
        run: curl -Ls ${DEPLOY_APP_BASE}/${DEPLOY_APP_BRANCH}/dumpenv.sh | bash

      - name: Deploy Develop
        if: env.GIT_REPO_BRANCH == 'develop'
        run: curl -Ls ${DEPLOY_APP_BASE}/${DEPLOY_APP_BRANCH}/dumpenv.sh | bash

      - name: Deploy Personal Evaluation
        if: env.GIT_REPO_BRANCH == 'feature/github-actions'
        env:
          FOO: bar
        run: curl -Ls ${DEPLOY_APP_BASE}/${DEPLOY_APP_BRANCH}/dumpenv.sh | bash
