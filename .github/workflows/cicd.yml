---
name: Build, Test and Deploy

env:
  RELEASE_NAME: prt
  DJANGO_APP: endorsement
  COMMIT_HASH: $(git rev-parse --short=7 "$GITHUB_SHA")

on:
  push:
    branches:
      - feature/github-actions
  pull_request:
    branches:
      - feature/github-actions
    types:
      - opened
      - reopened
      - synchronize

jobs:
  pipeline:
    runs-on: ubuntu-18.04

    env:
      GH_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BRANCH: ${GITHUB_REF##*/}
      IMAGE_TAG: ${{ env.RELEASE_NAME }}:${{ env.COMMIT_HASH }}
      GIT_REPO_BRANCH: ${{ github.ref }}
      GIT_REPO_SLUG: ${{ github.repository }}
      BUILD_NUMBER: ${{ github.run_id }}
      BUILD_WEB_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Prep Image Cache
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache || true
          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache || true

      - name: Build Intermediate Image
        run: |
          docker build --target wpack -t wpack --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache .

      - name: Cache Intermediate Image
        run: |
          docker tag wpack docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache && docker push docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache || true

      - name: Build App Image
        run: |
          docker build --target app-container -t "$IMAGE_TAG" --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache .

      - name: Cache App Image
        run: |
          docker tag "$IMAGE_TAG" docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache && docker push docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache || true

      - name: Build Test Image
        run: |
          docker build --target app-test-container -t app-test-container --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/build-cache --cache-from=docker.pkg.github.com/$GITHUB_REPOSITORY/webpack-cache .

      - name: Install Test Tooling
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install coverage
          pip install coveralls

      - name: Run Image Tests
        id: tests
        shell: bash
        run: >-
          docker run -u root -t
          -v /tmp:/coverage
          -e DJANGO_APP="${{ env.DJANGO_APP }}"
          -e "ENV=localdev" -e "AUTH=SAML_MOCK"
          app-test-container
          bash -c ". ./docker/test.sh"

      - name: Record Test Results
        shell: bash
        run: |
          cp /tmp/.coverage.* .
          coverage combine
          coveralls

      - name: Push Image to GCR
        # if: github.event_name == 'push'
        env:
          REPO_TAG: gcr.io/uwit-mci-axdd/$IMAGE_TAG
        run: |
          echo "${{ secrets.GCP_JSON_KEY }}" | docker login --username=_json_key --password-stdin https://gcr.io
          echo docker tag "$IMAGE_TAG" "$REPO_TAG"
          echo docker push "$REPO_TAG"

      - name: Deploy Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          curl -Ls https://raw.githubusercontent.com/uw-it-aca/gcp-app-deploy/feature/dump-env/dumpenv.sh | bash

      - name: Deploy Develop
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: |
          curl -Ls https://raw.githubusercontent.com/uw-it-aca/gcp-app-deploy/feature/dump-env/dumpenv.sh | bash

      - name: Deploy Personal Evaluation
        if: github.event_name == 'push' && github.ref == 'refs/heads/feature/github-actions'
        env:
          FOO: bar
        run: |
          curl -Ls https://raw.githubusercontent.com/uw-it-aca/gcp-app-deploy/feature/dump-env/dumpenv.sh | bash
